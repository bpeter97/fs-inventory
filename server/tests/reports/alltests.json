{
  "stats": {
    "suites": 26,
    "tests": 45,
    "passes": 45,
    "pending": 0,
    "failures": 0,
    "start": "2022-10-29T17:44:55.491Z",
    "end": "2022-10-29T17:45:32.637Z",
    "duration": 37146,
    "testsRegistered": 45,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d405949c-3498-420b-9378-92fe881d2a4f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6e6d83ac-19fc-4e79-b3e1-5939b706a96d",
          "title": "ITEMS",
          "fullFile": "D:\\Coding\\fms-react\\server\\tests\\items.test.js",
          "file": "\\tests\\items.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: populateUsers in \"ITEMS\"",
              "fullTitle": "ITEMS \"before each\" hook: populateUsers in \"ITEMS\"",
              "timedOut": false,
              "duration": 444,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.deleteMany({})\n\t.then(() => {\n\t\t// generate the hash/salted password for the users.\n\t\tvar userOne = new User(users[0]).save().then((user) => {\n\t\t\tusers[0].token = user.generateAuthToken();\n\t\t});\n\t\tvar userTwo = new User(users[1]).save().then((user) => {\n\t\t\tusers[1].token = user.generateAuthToken();\n\t\t});\n\t\tvar userThree = new User(users[2]).save();\n\t\tvar userFour = new User(users[3]).save();\n\t\treturn Promise.all([userOne, userTwo, userThree, userFour]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "4ff59b27-1cdb-4b68-8d6c-4646a52caf6d",
              "parentUUID": "6e6d83ac-19fc-4e79-b3e1-5939b706a96d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populatePrograms in \"ITEMS\"",
              "fullTitle": "ITEMS \"before each\" hook: populatePrograms in \"ITEMS\"",
              "timedOut": false,
              "duration": 192,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Program.deleteMany({})\n\t.then(() => {\n\t\t// generate the hash/salted password for the users.\n\t\tvar programOne = new Program(programs[0]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\tvar programTwo = new Program(programs[1]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\tvar programThree = new Program(programs[2]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\treturn Promise.all([programOne, programTwo, programThree]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "2c216103-5123-4d65-af69-d8edb3cfe32c",
              "parentUUID": "6e6d83ac-19fc-4e79-b3e1-5939b706a96d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateWarehouses in \"ITEMS\"",
              "fullTitle": "ITEMS \"before each\" hook: populateWarehouses in \"ITEMS\"",
              "timedOut": false,
              "duration": 172,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Warehouse.deleteMany({})\n\t.then(() => {\n\t\t// generate the hash/salted password for the users.\n\t\tvar warehouseOne = new Warehouse(warehouses[0])\n\t\t\t.save()\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t\tvar warehouseTwo = new Warehouse(warehouses[1])\n\t\t\t.save()\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t\tvar warehouseThree = new Warehouse(warehouses[2])\n\t\t\t.save()\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t\treturn Promise.all([warehouseOne, warehouseTwo, warehouseThree]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "ac7aad57-27aa-48f8-bec0-ae65868e2d54",
              "parentUUID": "6e6d83ac-19fc-4e79-b3e1-5939b706a96d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateItems in \"ITEMS\"",
              "fullTitle": "ITEMS \"before each\" hook: populateItems in \"ITEMS\"",
              "timedOut": false,
              "duration": 183,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Item.deleteMany({})\n\t.then(() => {\n\t\t// create and save items\n\t\tvar itemOne = new Item(items[0]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\tvar itemTwo = new Item(items[1]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\tvar itemThree = new Item(items[2]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\treturn Promise.all([itemOne, itemTwo, itemThree]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "c0528476-5f2b-41e3-9736-ac32877782fb",
              "parentUUID": "6e6d83ac-19fc-4e79-b3e1-5939b706a96d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "57bf76fc-75af-406c-b6ac-b85e5b2aa73b",
              "title": "GET /items",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\items.test.js",
              "file": "\\tests\\items.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of items",
                  "fullTitle": "ITEMS GET /items should return an array of items",
                  "timedOut": false,
                  "duration": 277,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(\"/api/items\")\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.length).to.equal(items.length);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "32f738fa-068c-40b0-b885-729c05b16f98",
                  "parentUUID": "57bf76fc-75af-406c-b6ac-b85e5b2aa73b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return an array of items if not authorized",
                  "fullTitle": "ITEMS GET /items should not return an array of items if not authorized",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(\"/api/items\")\n\t.expect(401)\n\t.expect((res) => {\n\t\texpect(res.body.auth).to.equal(\"Authorization failed\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "f1be64b8-6098-47d6-8d4e-96eea4e01d3c",
                  "parentUUID": "57bf76fc-75af-406c-b6ac-b85e5b2aa73b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32f738fa-068c-40b0-b885-729c05b16f98",
                "f1be64b8-6098-47d6-8d4e-96eea4e01d3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 281,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c28bb400-eeaa-408e-8ffb-c347bb91123d",
              "title": "GET /items/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\items.test.js",
              "file": "\\tests\\items.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an item",
                  "fullTitle": "ITEMS GET /items/:id should return an item",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(`/api/items/${items[0]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.item_name).to.equal(items[0].item_name);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "795e2262-7f25-4574-a6f9-d8348f419749",
                  "parentUUID": "c28bb400-eeaa-408e-8ffb-c347bb91123d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return an item with incorrect ID",
                  "fullTitle": "ITEMS GET /items/:id should not return an item with incorrect ID",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(`/api/items/${items[0]._id}ssssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.item).to.equal(\"There was no item found\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "8dbf4377-1deb-45ca-9fb9-f64c13607460",
                  "parentUUID": "c28bb400-eeaa-408e-8ffb-c347bb91123d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "795e2262-7f25-4574-a6f9-d8348f419749",
                "8dbf4377-1deb-45ca-9fb9-f64c13607460"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 253,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "deee838e-7e38-4811-a8e2-06e2379250c6",
              "title": "POST /items",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\items.test.js",
              "file": "\\tests\\items.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new item",
                  "fullTitle": "ITEMS POST /items should create a new item",
                  "timedOut": false,
                  "duration": 185,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post(\"/api/items\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(newItem)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.item_name).to.equal(newItem.item_name);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "dd93200b-015d-425a-af80-f9e0abe214c7",
                  "parentUUID": "deee838e-7e38-4811-a8e2-06e2379250c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create a new item",
                  "fullTitle": "ITEMS POST /items should not create a new item",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "newItem.item_name = \"\";\nrequest(app)\n\t.post(\"/api/items\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(newItem)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.item_name).to.equal(\n\t\t\t\"Item name is required\"\n\t\t);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "9263b76b-1b31-4359-914f-9623f60c3b14",
                  "parentUUID": "deee838e-7e38-4811-a8e2-06e2379250c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd93200b-015d-425a-af80-f9e0abe214c7",
                "9263b76b-1b31-4359-914f-9623f60c3b14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 276,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7d2c08c1-a3ed-480d-b5c5-0f7a8d75b0e4",
              "title": "DELETE /items/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\items.test.js",
              "file": "\\tests\\items.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a item",
                  "fullTitle": "ITEMS DELETE /items/:id should delete a item",
                  "timedOut": false,
                  "duration": 186,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.delete(`/api/items/${items[2]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.item_name).to.equal(items[2].item_name);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "abacf878-7817-4924-9950-781ee5e042c4",
                  "parentUUID": "7d2c08c1-a3ed-480d-b5c5-0f7a8d75b0e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete a item",
                  "fullTitle": "ITEMS DELETE /items/:id should not delete a item",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.delete(`/api/items/${items[2]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.item).to.equal(\"There was no item found\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "eb0b7c31-d7c5-4ae8-bd90-e98895d0aa99",
                  "parentUUID": "7d2c08c1-a3ed-480d-b5c5-0f7a8d75b0e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abacf878-7817-4924-9950-781ee5e042c4",
                "eb0b7c31-d7c5-4ae8-bd90-e98895d0aa99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 271,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "fcf00d7b-d325-46f5-9295-1c4867f393fd",
              "title": "PATCH /items/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\items.test.js",
              "file": "\\tests\\items.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a item",
                  "fullTitle": "ITEMS PATCH /items/:id should update a item",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "items[2].item_name = \"Bag of Screws\";\nrequest(app)\n\t.patch(`/api/items/${items[2]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(items[2])\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.item_name).to.equal(\"Bag of Screws\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "d8442de4-160a-4b23-a8bb-218d4e23aec7",
                  "parentUUID": "fcf00d7b-d325-46f5-9295-1c4867f393fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not update a item",
                  "fullTitle": "ITEMS PATCH /items/:id should not update a item",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "items[1].item_name = \"Bag of Screws\";\nrequest(app)\n\t.patch(`/api/items/${items[1]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(items[1])\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.item).to.equal(\"There was no item found\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "74274477-b4ab-40ba-846d-e6808602f93a",
                  "parentUUID": "fcf00d7b-d325-46f5-9295-1c4867f393fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8442de4-160a-4b23-a8bb-218d4e23aec7",
                "74274477-b4ab-40ba-846d-e6808602f93a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 265,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bb2baaf3-bc5a-48bd-ba51-e9c327a588a5",
          "title": "PROGRAMS",
          "fullFile": "D:\\Coding\\fms-react\\server\\tests\\programs.test.js",
          "file": "\\tests\\programs.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: populatePrograms in \"PROGRAMS\"",
              "fullTitle": "PROGRAMS \"before each\" hook: populatePrograms in \"PROGRAMS\"",
              "timedOut": false,
              "duration": 169,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Program.deleteMany({})\n\t.then(() => {\n\t\t// generate the hash/salted password for the users.\n\t\tvar programOne = new Program(programs[0]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\tvar programTwo = new Program(programs[1]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\tvar programThree = new Program(programs[2]).save().catch((e) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t\treturn Promise.all([programOne, programTwo, programThree]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "17bb5c8f-b485-47ec-a5c0-419506d415b4",
              "parentUUID": "bb2baaf3-bc5a-48bd-ba51-e9c327a588a5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateUsers in \"PROGRAMS\"",
              "fullTitle": "PROGRAMS \"before each\" hook: populateUsers in \"PROGRAMS\"",
              "timedOut": false,
              "duration": 433,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.deleteMany({})\n\t.then(() => {\n\t\t// generate the hash/salted password for the users.\n\t\tvar userOne = new User(users[0]).save().then((user) => {\n\t\t\tusers[0].token = user.generateAuthToken();\n\t\t});\n\t\tvar userTwo = new User(users[1]).save().then((user) => {\n\t\t\tusers[1].token = user.generateAuthToken();\n\t\t});\n\t\tvar userThree = new User(users[2]).save();\n\t\tvar userFour = new User(users[3]).save();\n\t\treturn Promise.all([userOne, userTwo, userThree, userFour]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "1145f3e0-80be-46a0-b6b9-be82516c7127",
              "parentUUID": "bb2baaf3-bc5a-48bd-ba51-e9c327a588a5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9fa67dee-dc85-465d-add3-6016fec7b52d",
              "title": "GET /programs",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\programs.test.js",
              "file": "\\tests\\programs.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of programs",
                  "fullTitle": "PROGRAMS GET /programs should return an array of programs",
                  "timedOut": false,
                  "duration": 160,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(\"/api/programs\")\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.length).to.equal(programs.length);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "02fdc708-8109-4a58-9dfb-317e8e3ad464",
                  "parentUUID": "9fa67dee-dc85-465d-add3-6016fec7b52d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return an array of programs if not logged in",
                  "fullTitle": "PROGRAMS GET /programs should not return an array of programs if not logged in",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(\"/api/programs\")\n\t.expect(401)\n\t.expect((res) => {\n\t\texpect(res.body.auth).to.equal(\"Authorization failed\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "c4cfa780-983e-48f6-95aa-bcfa2954403a",
                  "parentUUID": "9fa67dee-dc85-465d-add3-6016fec7b52d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02fdc708-8109-4a58-9dfb-317e8e3ad464",
                "c4cfa780-983e-48f6-95aa-bcfa2954403a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 162,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2cda0b23-ad08-4a3a-a495-ccabcee4a692",
              "title": "GET /programs/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\programs.test.js",
              "file": "\\tests\\programs.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a specific program",
                  "fullTitle": "PROGRAMS GET /programs/:id should return a specific program",
                  "timedOut": false,
                  "duration": 165,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(`/api/programs/${programs[0]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(\"Program 1\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "3a27e3b1-d1fa-4f3a-b17d-adeac39e0247",
                  "parentUUID": "2cda0b23-ad08-4a3a-a495-ccabcee4a692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return a program",
                  "fullTitle": "PROGRAMS GET /programs/:id should not return a program",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(`/api/programs/${programs[0]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.program).to.equal(\n\t\t\t\"There was no program found\"\n\t\t);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "44f65ead-2458-4bb9-9b5b-a5059501a6bf",
                  "parentUUID": "2cda0b23-ad08-4a3a-a495-ccabcee4a692",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a27e3b1-d1fa-4f3a-b17d-adeac39e0247",
                "44f65ead-2458-4bb9-9b5b-a5059501a6bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 253,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "60f3ce1e-0e67-4e71-a15b-73f049bb2f68",
              "title": "POST /programs",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\programs.test.js",
              "file": "\\tests\\programs.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new program",
                  "fullTitle": "PROGRAMS POST /programs should create a new program",
                  "timedOut": false,
                  "duration": 187,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post(\"/api/programs/\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(newProgram)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(newProgram.name);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "1892b428-2cec-4758-a2f4-10e6a5d4cd52",
                  "parentUUID": "60f3ce1e-0e67-4e71-a15b-73f049bb2f68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create a new program",
                  "fullTitle": "PROGRAMS POST /programs should not create a new program",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "newProgram.name = \"\";\nrequest(app)\n\t.post(\"/api/programs/\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(newProgram)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(\"Name is required\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "e5b13253-d415-42ab-9e39-e6a38b36d025",
                  "parentUUID": "60f3ce1e-0e67-4e71-a15b-73f049bb2f68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1892b428-2cec-4758-a2f4-10e6a5d4cd52",
                "e5b13253-d415-42ab-9e39-e6a38b36d025"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 274,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "17bf64c1-8d35-46bd-9d99-0096351831de",
              "title": "PATCH /programs/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\programs.test.js",
              "file": "\\tests\\programs.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a program",
                  "fullTitle": "PROGRAMS PATCH /programs/:id should update a program",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "programs[2].name = \"Program 15\";\nrequest(app)\n\t.patch(`/api/programs/${programs[2]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(programs[2])\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(\"Program 15\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "357230fa-ff69-4f7a-9805-759187e0abc6",
                  "parentUUID": "17bf64c1-8d35-46bd-9d99-0096351831de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not update a program",
                  "fullTitle": "PROGRAMS PATCH /programs/:id should not update a program",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "programs[2].name = \"WH 020\";\nrequest(app)\n\t.patch(`/api/programs/${programs[2]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(programs[2])\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.program).to.equal(\n\t\t\t\"There was no program found\"\n\t\t);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "782046b9-e5d4-401e-baac-d732ffb95678",
                  "parentUUID": "17bf64c1-8d35-46bd-9d99-0096351831de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "357230fa-ff69-4f7a-9805-759187e0abc6",
                "782046b9-e5d4-401e-baac-d732ffb95678"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 253,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "21a8ca7e-e153-489b-b5a8-6056adef3a7a",
              "title": "DELETE /programs/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\programs.test.js",
              "file": "\\tests\\programs.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a program",
                  "fullTitle": "PROGRAMS DELETE /programs/:id should delete a program",
                  "timedOut": false,
                  "duration": 165,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.delete(`/api/programs/${programs[2]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(programs[2].name);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "de89a120-0baf-483b-a5d1-f3a1c926bf51",
                  "parentUUID": "21a8ca7e-e153-489b-b5a8-6056adef3a7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete a program",
                  "fullTitle": "PROGRAMS DELETE /programs/:id should not delete a program",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.delete(`/api/programs/${programs[2]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.program).to.equal(\n\t\t\t\"There was no program found\"\n\t\t);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "b42fbb96-3e1e-4942-81b2-3067e770fad9",
                  "parentUUID": "21a8ca7e-e153-489b-b5a8-6056adef3a7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de89a120-0baf-483b-a5d1-f3a1c926bf51",
                "b42fbb96-3e1e-4942-81b2-3067e770fad9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 256,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "022977d4-532b-4f36-bf33-d621ec43e9bc",
          "title": "USERS",
          "fullFile": "D:\\Coding\\fms-react\\server\\tests\\users.test.js",
          "file": "\\tests\\users.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: populateUsers in \"USERS\"",
              "fullTitle": "USERS \"before each\" hook: populateUsers in \"USERS\"",
              "timedOut": false,
              "duration": 444,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.deleteMany({})\n\t.then(() => {\n\t\t// generate the hash/salted password for the users.\n\t\tvar userOne = new User(users[0]).save().then((user) => {\n\t\t\tusers[0].token = user.generateAuthToken();\n\t\t});\n\t\tvar userTwo = new User(users[1]).save().then((user) => {\n\t\t\tusers[1].token = user.generateAuthToken();\n\t\t});\n\t\tvar userThree = new User(users[2]).save();\n\t\tvar userFour = new User(users[3]).save();\n\t\treturn Promise.all([userOne, userTwo, userThree, userFour]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "0f726aed-64b0-4e89-8ab6-92ccfe9f9577",
              "parentUUID": "022977d4-532b-4f36-bf33-d621ec43e9bc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "188580ce-337b-4b20-9f36-ab30e39bda01",
              "title": "GET /users",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\users.test.js",
              "file": "\\tests\\users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of users",
                  "fullTitle": "USERS GET /users should return an array of users",
                  "timedOut": false,
                  "duration": 165,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(\"/api/users\")\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.length).to.equal(users.length);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "be7a4fa1-2e23-430a-80ed-f56bfcc99fff",
                  "parentUUID": "188580ce-337b-4b20-9f36-ab30e39bda01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be7a4fa1-2e23-430a-80ed-f56bfcc99fff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 165,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "674bb60f-f57b-4e61-b6b9-10413841831d",
              "title": "POST /users",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\users.test.js",
              "file": "\\tests\\users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new user",
                  "fullTitle": "USERS POST /users should create a new user",
                  "timedOut": false,
                  "duration": 402,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post(\"/api/users\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(newUser)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.username).to.equal(newUser.username);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tUser.findOne({ username: newUser.username })\n\t\t\t.then((user) => {\n\t\t\t\texpect(user).to.be.ok;\n\t\t\t\texpect(user.first_name).to.equal(\n\t\t\t\t\tnewUser.first_name\n\t\t\t\t);\n\t\t\t\texpect(user.password).not.to.equal(\n\t\t\t\t\tnewUser.password\n\t\t\t\t);\n\t\t\t\tdone();\n\t\t\t})\n\t\t\t.catch((e) => done(e));\n\t});",
                  "err": {},
                  "uuid": "ccb00441-7bf3-4d9c-88b8-977b7d435eaf",
                  "parentUUID": "674bb60f-f57b-4e61-b6b9-10413841831d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create a new user with validation errors",
                  "fullTitle": "USERS POST /users should not create a new user with validation errors",
                  "timedOut": false,
                  "duration": 165,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "newUser.email = \"amessedupemail\";\nnewUser.first_name = \"l\";\nnewUser.last_name = \"l\";\nnewUser.username = \"l\";\nnewUser.password = \"l\";\nrequest(app)\n\t.post(\"/api/users\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(newUser)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.email).to.equal(\"Must enter a valid email\");\n\t\texpect(res.body.first_name).to.equal(\n\t\t\t\"First name must be between 2 and 20 characters\"\n\t\t);\n\t\texpect(res.body.last_name).to.equal(\n\t\t\t\"Last name must be between 2 and 20 characters\"\n\t\t);\n\t\texpect(res.body.username).to.equal(\n\t\t\t\"Username must be between 4 and 20 characters\"\n\t\t);\n\t\texpect(res.body.password).to.equal(\n\t\t\t\"Password must be more than 3 characters\"\n\t\t);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tUser.findOne({ username: newUser.username })\n\t\t\t.then((user) => {\n\t\t\t\texpect(user).to.not.be.ok;\n\t\t\t\tdone();\n\t\t\t})\n\t\t\t.catch((e) => done(e));\n\t});",
                  "err": {},
                  "uuid": "e3dca143-d3da-43c8-949f-796e4e06831d",
                  "parentUUID": "674bb60f-f57b-4e61-b6b9-10413841831d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccb00441-7bf3-4d9c-88b8-977b7d435eaf",
                "e3dca143-d3da-43c8-949f-796e4e06831d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 567,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "561a697e-c714-4a53-b78b-288bfee96392",
              "title": "GET /users/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\users.test.js",
              "file": "\\tests\\users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get a specific user with the provided ID",
                  "fullTitle": "USERS GET /users/:id should get a specific user with the provided ID",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(`/api/users/${users[0]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body._id).to.equal(users[0]._id.toHexString());\n\t\texpect(res.body.username).to.equal(users[0].username);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "fbe5fccc-76cc-4d86-868f-d8f411d8577c",
                  "parentUUID": "561a697e-c714-4a53-b78b-288bfee96392",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return a user with invalid ID",
                  "fullTitle": "USERS GET /users/:id should not return a user with invalid ID",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(`/api/users/${users[0]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.user).to.equal(\"There was no user found\");\n\t\texpect(res.body.username).to.not.equal(users[0].username);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "135e94f2-8c5e-47fa-bffa-3471841e920b",
                  "parentUUID": "561a697e-c714-4a53-b78b-288bfee96392",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbe5fccc-76cc-4d86-868f-d8f411d8577c",
                "135e94f2-8c5e-47fa-bffa-3471841e920b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 249,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "a12b3a96-823d-4468-a52b-66e16f61a148",
              "title": "PATCH /users/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\users.test.js",
              "file": "\\tests\\users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update and return a single user",
                  "fullTitle": "USERS PATCH /users/:id should update and return a single user",
                  "timedOut": false,
                  "duration": 253,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "users[1].approved = true;\nrequest(app)\n\t.patch(`/api/users/${users[1]._id.toHexString()}`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(users[1])\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.username).to.equal(users[1].username);\n\t\texpect(res.body.approved).to.equal(true);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tUser.findById(users[1]._id.toHexString())\n\t\t\t.then((user) => {\n\t\t\t\texpect(user.approved).to.equal(true);\n\t\t\t\tdone();\n\t\t\t})\n\t\t\t.catch((e) => done(e));\n\t});",
                  "err": {},
                  "uuid": "c8d36d84-956f-4d38-a3fc-8abac463aaff",
                  "parentUUID": "a12b3a96-823d-4468-a52b-66e16f61a148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not update and return a user with invalid ID",
                  "fullTitle": "USERS PATCH /users/:id should not update and return a user with invalid ID",
                  "timedOut": false,
                  "duration": 81,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.patch(`/api/users/${users[1]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(users[1])\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.auth).to.equal(\"Invalid ID\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "2ef9ed94-d072-4c53-b179-f854479a49cb",
                  "parentUUID": "a12b3a96-823d-4468-a52b-66e16f61a148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not update and return a user with validation errors",
                  "fullTitle": "USERS PATCH /users/:id should not update and return a user with validation errors",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "userData = {\n\tfirstName: \"\",\n\tlastName: \"Peter\",\n\tsuffix: \"Sr\",\n\tusername: \"blpsr\",\n\tpassword: \"thePassword\",\n\temail: \"gbr@test.com\",\n\ttype: \"Brian\",\n};\nrequest(app)\n\t.patch(`/api/users/${users[1]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(userData)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.first_name).to.equal(\n\t\t\t\"First name is required\"\n\t\t);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tUser.findById(users[1]._id.toHexString())\n\t\t\t.then((user) => {\n\t\t\t\texpect(user.approved).to.equal(true);\n\t\t\t\texpect(user.first_name).to.equal(\"Brian\");\n\t\t\t\tdone();\n\t\t\t})\n\t\t\t.catch((e) => done(e));\n\t});",
                  "err": {},
                  "uuid": "32bace75-17ce-4668-9cc0-057b49e3dd82",
                  "parentUUID": "a12b3a96-823d-4468-a52b-66e16f61a148",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8d36d84-956f-4d38-a3fc-8abac463aaff",
                "2ef9ed94-d072-4c53-b179-f854479a49cb",
                "32bace75-17ce-4668-9cc0-057b49e3dd82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 505,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f493b2cf-8a9d-4268-b35f-3bde98a8011e",
              "title": "DELETE /users/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\users.test.js",
              "file": "\\tests\\users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete and return a single user",
                  "fullTitle": "USERS DELETE /users/:id should delete and return a single user",
                  "timedOut": false,
                  "duration": 246,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.delete(`/api/users/${users[0]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body._id).to.equal(users[0]._id.toHexString());\n\t\texpect(res.body.username).to.equal(users[0].username);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tUser.findById(users[0]._id.toHexString())\n\t\t\t.then((user) => {\n\t\t\t\texpect(user).to.not.be.ok;\n\t\t\t\tdone();\n\t\t\t})\n\t\t\t.catch((e) => done(e));\n\t});",
                  "err": {},
                  "uuid": "8046d9bc-0e01-41a4-a340-d3c2a2aedd77",
                  "parentUUID": "f493b2cf-8a9d-4268-b35f-3bde98a8011e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete and return a user with invalid ID",
                  "fullTitle": "USERS DELETE /users/:id should not delete and return a user with invalid ID",
                  "timedOut": false,
                  "duration": 164,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.delete(`/api/users/${users[1]._id}sss`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.user).to.equal(\"There was no user found\");\n\t\texpect(res.body.username).to.not.equal(users[1].username);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tUser.findById(users[1]._id.toHexString())\n\t\t\t.then((user) => {\n\t\t\t\texpect(user).to.be.ok;\n\t\t\t\texpect(user.username).to.equal(users[1].username);\n\t\t\t\tdone();\n\t\t\t})\n\t\t\t.catch((e) => done(e));\n\t});",
                  "err": {},
                  "uuid": "57c9e532-f815-45a0-becd-9a347d81e42f",
                  "parentUUID": "f493b2cf-8a9d-4268-b35f-3bde98a8011e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8046d9bc-0e01-41a4-a340-d3c2a2aedd77",
                "57c9e532-f815-45a0-becd-9a347d81e42f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 410,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "fbd2ebb8-55a7-4913-a5ba-5c34db9fa065",
              "title": "POST /login",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\users.test.js",
              "file": "\\tests\\users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should log the user into the website",
                  "fullTitle": "USERS POST /login should log the user into the website",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post(\"/api/login\")\n\t.send(loginUser)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.success).to.equal(true);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "388be549-a9c6-41bd-9828-8fd0fb390c6c",
                  "parentUUID": "fbd2ebb8-55a7-4913-a5ba-5c34db9fa065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not log the user in with an incorrect password",
                  "fullTitle": "USERS POST /login should not log the user in with an incorrect password",
                  "timedOut": false,
                  "duration": 145,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post(\"/api/login\")\n\t.send(loginWrongUser)\n\t.expect(401)\n\t.expect((res) => {\n\t\texpect(res.body.login).to.equal(\n\t\t\t\"Wrong username/password combination\"\n\t\t);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "9acb2a12-7f8c-4bda-af6e-828e228f89f7",
                  "parentUUID": "fbd2ebb8-55a7-4913-a5ba-5c34db9fa065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not log the user in when not approved",
                  "fullTitle": "USERS POST /login should not log the user in when not approved",
                  "timedOut": false,
                  "duration": 154,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post(\"/api/login\")\n\t.send(users[3])\n\t.expect(401)\n\t.expect((res) => {\n\t\texpect(res.body.login).to.equal(\n\t\t\t\"Your account is not approved yet\"\n\t\t);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "d6a35020-9af9-4829-8084-24c43a4a8ac2",
                  "parentUUID": "fbd2ebb8-55a7-4913-a5ba-5c34db9fa065",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "388be549-a9c6-41bd-9828-8fd0fb390c6c",
                "9acb2a12-7f8c-4bda-af6e-828e228f89f7",
                "d6a35020-9af9-4829-8084-24c43a4a8ac2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 451,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "dd8ffba4-d74c-4673-ba8d-b79268691bec",
              "title": "POST /register",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\users.test.js",
              "file": "\\tests\\users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user",
                  "fullTitle": "USERS POST /register should register a new user",
                  "timedOut": false,
                  "duration": 319,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post(\"/api/register\")\n\t.send(registerUser)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.username).to.equal(registerUser.username);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tUser.findOne({ username: registerUser.username })\n\t\t\t.then((user) => {\n\t\t\t\texpect(user).to.be.ok;\n\t\t\t\texpect(user.first_name).to.equal(\n\t\t\t\t\tregisterUser.first_name\n\t\t\t\t);\n\t\t\t\texpect(user.password).not.to.equal(\n\t\t\t\t\tregisterUser.password\n\t\t\t\t);\n\t\t\t\tdone();\n\t\t\t})\n\t\t\t.catch((e) => done(e));\n\t});",
                  "err": {},
                  "uuid": "a0621038-01ff-4191-a591-bd6e27a541b1",
                  "parentUUID": "dd8ffba4-d74c-4673-ba8d-b79268691bec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register a new user with validation errors",
                  "fullTitle": "USERS POST /register should not register a new user with validation errors",
                  "timedOut": false,
                  "duration": 82,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "registerUser.email = \"amessedupemail\";\nregisterUser.first_name = \"l\";\nregisterUser.last_name = \"l\";\nregisterUser.username = \"l\";\nregisterUser.password = \"l\";\nrequest(app)\n\t.post(\"/api/register\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(registerUser)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.email).to.equal(\"Must enter a valid email\");\n\t\texpect(res.body.first_name).to.equal(\n\t\t\t\"First name must be between 2 and 20 characters\"\n\t\t);\n\t\texpect(res.body.last_name).to.equal(\n\t\t\t\"Last name must be between 2 and 20 characters\"\n\t\t);\n\t\texpect(res.body.username).to.equal(\n\t\t\t\"Username must be between 4 and 20 characters\"\n\t\t);\n\t\texpect(res.body.password).to.equal(\n\t\t\t\"Password must be more than 3 characters\"\n\t\t);\n\t})\n\t.end((err) => {\n\t\tif (err) {\n\t\t\treturn done(err);\n\t\t}\n\t\tUser.findOne({ username: newUser.username })\n\t\t\t.then((user) => {\n\t\t\t\texpect(user).to.not.be.ok;\n\t\t\t\tdone();\n\t\t\t})\n\t\t\t.catch((e) => done(e));\n\t});",
                  "err": {},
                  "uuid": "0eb6bfab-0416-4b43-ade5-727c6e18e9d9",
                  "parentUUID": "dd8ffba4-d74c-4673-ba8d-b79268691bec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0621038-01ff-4191-a591-bd6e27a541b1",
                "0eb6bfab-0416-4b43-ade5-727c6e18e9d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 401,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "971e7c1a-f9cf-4c02-a7b2-32197862d75c",
          "title": "WAREHOUSES",
          "fullFile": "D:\\Coding\\fms-react\\server\\tests\\warehouses.test.js",
          "file": "\\tests\\warehouses.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: populateWarehouses in \"WAREHOUSES\"",
              "fullTitle": "WAREHOUSES \"before each\" hook: populateWarehouses in \"WAREHOUSES\"",
              "timedOut": false,
              "duration": 168,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Warehouse.deleteMany({})\n\t.then(() => {\n\t\t// generate the hash/salted password for the users.\n\t\tvar warehouseOne = new Warehouse(warehouses[0])\n\t\t\t.save()\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t\tvar warehouseTwo = new Warehouse(warehouses[1])\n\t\t\t.save()\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t\tvar warehouseThree = new Warehouse(warehouses[2])\n\t\t\t.save()\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t\treturn Promise.all([warehouseOne, warehouseTwo, warehouseThree]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "78aeceb8-1dcb-48ff-b8f4-de49af036e27",
              "parentUUID": "971e7c1a-f9cf-4c02-a7b2-32197862d75c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateUsers in \"WAREHOUSES\"",
              "fullTitle": "WAREHOUSES \"before each\" hook: populateUsers in \"WAREHOUSES\"",
              "timedOut": false,
              "duration": 429,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.deleteMany({})\n\t.then(() => {\n\t\t// generate the hash/salted password for the users.\n\t\tvar userOne = new User(users[0]).save().then((user) => {\n\t\t\tusers[0].token = user.generateAuthToken();\n\t\t});\n\t\tvar userTwo = new User(users[1]).save().then((user) => {\n\t\t\tusers[1].token = user.generateAuthToken();\n\t\t});\n\t\tvar userThree = new User(users[2]).save();\n\t\tvar userFour = new User(users[3]).save();\n\t\treturn Promise.all([userOne, userTwo, userThree, userFour]);\n\t})\n\t.then(() => done())\n\t.catch((e) => console.log(e));",
              "err": {},
              "uuid": "7ad79e66-0393-4926-94c9-e66b6dc47e98",
              "parentUUID": "971e7c1a-f9cf-4c02-a7b2-32197862d75c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c2b25ee3-9ca4-4231-9dbb-d0dd2f5e2406",
              "title": "GET /warehouses",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\warehouses.test.js",
              "file": "\\tests\\warehouses.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of warehouses",
                  "fullTitle": "WAREHOUSES GET /warehouses should return an array of warehouses",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(\"/api/warehouses\")\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.length).to.equal(warehouses.length);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "64646593-60d8-4742-8689-cb27162210e5",
                  "parentUUID": "c2b25ee3-9ca4-4231-9dbb-d0dd2f5e2406",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return an array of warehouses if not logged in",
                  "fullTitle": "WAREHOUSES GET /warehouses should not return an array of warehouses if not logged in",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(\"/api/warehouses\")\n\t.expect(401)\n\t.expect((res) => {\n\t\texpect(res.body.auth).to.equal(\"Authorization failed\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "55ad25b0-2cec-42ff-84dc-29a782757b6f",
                  "parentUUID": "c2b25ee3-9ca4-4231-9dbb-d0dd2f5e2406",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "64646593-60d8-4742-8689-cb27162210e5",
                "55ad25b0-2cec-42ff-84dc-29a782757b6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 171,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "309f8aca-37c7-4ce8-8f0e-76d49ea8bc64",
              "title": "GET /warehouses/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\warehouses.test.js",
              "file": "\\tests\\warehouses.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a specific warehouse",
                  "fullTitle": "WAREHOUSES GET /warehouses/:id should return a specific warehouse",
                  "timedOut": false,
                  "duration": 163,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(`/api/warehouses/${warehouses[0]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(\"WH 001\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "905b98dc-8122-4aea-b469-ed5b3bedf990",
                  "parentUUID": "309f8aca-37c7-4ce8-8f0e-76d49ea8bc64",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return a warehouse",
                  "fullTitle": "WAREHOUSES GET /warehouses/:id should not return a warehouse",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.get(`/api/warehouses/${warehouses[0]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.warehouse).to.equal(\n\t\t\t\"There was no warehouse found\"\n\t\t);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "c98a536f-037f-478f-8986-fc78a4deb044",
                  "parentUUID": "309f8aca-37c7-4ce8-8f0e-76d49ea8bc64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "905b98dc-8122-4aea-b469-ed5b3bedf990",
                "c98a536f-037f-478f-8986-fc78a4deb044"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 248,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "8cb3a4b4-15a0-478d-baab-6793535cde10",
              "title": "POST /warehouses",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\warehouses.test.js",
              "file": "\\tests\\warehouses.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new warehouse",
                  "fullTitle": "WAREHOUSES POST /warehouses should create a new warehouse",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.post(\"/api/warehouses/\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(newWarehouse)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(newWarehouse.name);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "c89f4fbe-43ad-418d-a57b-38788ffda9b4",
                  "parentUUID": "8cb3a4b4-15a0-478d-baab-6793535cde10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create a new warehouse",
                  "fullTitle": "WAREHOUSES POST /warehouses should not create a new warehouse",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "newWarehouse.name = \"\";\nrequest(app)\n\t.post(\"/api/warehouses/\")\n\t.set(\"Authorization\", users[0].token)\n\t.send(newWarehouse)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(\"Name is required\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "95f58bfb-52b9-44a6-9187-cb964b434d16",
                  "parentUUID": "8cb3a4b4-15a0-478d-baab-6793535cde10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c89f4fbe-43ad-418d-a57b-38788ffda9b4",
                "95f58bfb-52b9-44a6-9187-cb964b434d16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9fec651a-69bc-4492-acb9-4c62e62145bd",
              "title": "PATCH /warehouses/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\warehouses.test.js",
              "file": "\\tests\\warehouses.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a warehouse",
                  "fullTitle": "WAREHOUSES PATCH /warehouses/:id should update a warehouse",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "warehouses[2].name = \"WH 010\";\nrequest(app)\n\t.patch(`/api/warehouses/${warehouses[2]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(warehouses[2])\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(\"WH 010\");\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "6893dde7-c341-44a3-883d-209e50cd1e39",
                  "parentUUID": "9fec651a-69bc-4492-acb9-4c62e62145bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not update a warehouse",
                  "fullTitle": "WAREHOUSES PATCH /warehouses/:id should not update a warehouse",
                  "timedOut": false,
                  "duration": 85,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "warehouses[2].name = \"WH 020\";\nrequest(app)\n\t.patch(`/api/warehouses/${warehouses[2]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.send(warehouses[2])\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.warehouse).to.equal(\n\t\t\t\"There was no warehouse found\"\n\t\t);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "35fca09d-659d-43a4-ab74-aef09aa1c15e",
                  "parentUUID": "9fec651a-69bc-4492-acb9-4c62e62145bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6893dde7-c341-44a3-883d-209e50cd1e39",
                "35fca09d-659d-43a4-ab74-aef09aa1c15e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 254,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c187d512-012e-4399-bda1-b0884ced3e16",
              "title": "DELETE /warehouses/:id",
              "fullFile": "D:\\Coding\\fms-react\\server\\tests\\warehouses.test.js",
              "file": "\\tests\\warehouses.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a warehouse",
                  "fullTitle": "WAREHOUSES DELETE /warehouses/:id should delete a warehouse",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.delete(`/api/warehouses/${warehouses[2]._id}`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(200)\n\t.expect((res) => {\n\t\texpect(res.body.name).to.equal(warehouses[2].name);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "5306bef3-0257-4582-941d-be99342107e0",
                  "parentUUID": "c187d512-012e-4399-bda1-b0884ced3e16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete a warehouse",
                  "fullTitle": "WAREHOUSES DELETE /warehouses/:id should not delete a warehouse",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n\t.delete(`/api/warehouses/${warehouses[2]._id}ssss`)\n\t.set(\"Authorization\", users[0].token)\n\t.expect(400)\n\t.expect((res) => {\n\t\texpect(res.body.warehouse).to.equal(\n\t\t\t\"There was no warehouse found\"\n\t\t);\n\t})\n\t.end(done);",
                  "err": {},
                  "uuid": "4b979c0c-8494-4595-bda0-f84c3ae366f3",
                  "parentUUID": "c187d512-012e-4399-bda1-b0884ced3e16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5306bef3-0257-4582-941d-be99342107e0",
                "4b979c0c-8494-4595-bda0-f84c3ae366f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 266,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "alltests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "tests/reports",
        "reportFilename": "alltests"
      },
      "version": "6.2.0"
    }
  }
}